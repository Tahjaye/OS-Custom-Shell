import os
import subprocess
import sys

class CustomShell:
    def __init__(self):
        self.environment_variables = {}

    def parse_command(self, command):
        """
        Parse the command to handle I/O redirection and piping.
        
        Args:
            command (str): The command to parse.
        
        Returns:
            tuple: Parsed command and its type ('pipe', 'redirect_out', 'redirect_in', 'normal').
        
        Example:
            parse_command('ls | grep py')
        """
        if '|' in command:
            return command.split('|'), 'pipe'
        if '>' in command:
            return command.split('>'), 'redirect_out'
        if '<' in command:
            return command.split('<'), 'redirect_in'
        return command.strip().split(), 'normal'

    def execute_command(self, command):
        """
        Execute the parsed command.
        
        Args:
            command (list): The parsed command.
        
        Example:
            execute_command(['list', '/path/to/directory'])
        """
        if command[0] == "exit":
            sys.exit(0)
        elif command[0] == "help":
            self.display_help()
        elif command[0] == "modify":
            if len(command) != 3:
                print("Usage: modify <permissions> <file_name>")
                return
            self.modify_permissions(command[1], command[2])
        elif command[0] == "list":
            if len(command) != 2:
                print("Usage: list <path>")
                return
            self.list_attributes(command[1])
        else:
            self.run_external_command(command)

    def modify_permissions(self, permissions, file_name):
        """
        Modify the permissions of a file.
        
        Args:
            permissions (str): Permissions to set (e.g., '755').
            file_name (str): Name of the file.
        
        Example:
            modify_permissions('755', 'example.txt')
        """
        try:
            os.chmod(file_name, int(permissions, 8))
            print(f"Permissions of {file_name} changed to {permissions}")
        except Exception as e:
            print(f"Error modifying permissions: {e}")

    def list_attributes(self, path):
        """
        List files in a directory.
        
        Args:
            path (str): Path to the directory.
        
        Example:
            list_attributes('/path/to/directory')
        """
        try:
            for entry in os.listdir(path):
                print(entry)
        except Exception as e:
            print(f"Error listing attributes: {e}")

    def run_external_command(self, command):
        """
        Run an external command.
        
        Args:
            command (list): The command to run.
        
        Example:
            run_external_command(['ls', '-l'])
        """
        try:
            subprocess.run(command, check=True)
        except subprocess.CalledProcessError as e:
            print(f"Error executing command: {e}")

    def execute_piped_commands(self, commands):
        """
        Execute piped commands.
        
        Args:
            commands (list): List of commands to pipe.
        
        Example:
            execute_piped_commands(['ls', 'grep py'])
        """
        processes = []
        for cmd in commands:
            cmd = cmd.strip().split()
            p = subprocess.Popen(cmd, stdin=processes[-1].stdout if processes else None,
                                 stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            processes.append(p)
        output, errors = processes[-1].communicate()
        if errors:
            print(f"Error in piped command: {errors.decode()}")
        else:
            print(output.decode())

    def redirect_output(self, command, output_file):
        """
        Redirect command output to a file.
        
        Args:
            command (list): The command to run.
            output_file (str): The file to redirect output to.
        
        Example:
            redirect_output(['ls'], 'output.txt')
        """
        with open(output_file, 'w') as f:
            subprocess.run(command, stdout=f)

    def redirect_input(self, command, input_file):
        """
        Redirect input from a file to a command.
        
        Args:
            command (list): The command to run.
            input_file (str): The file to redirect input from.
        
        Example:
            redirect_input(['cat'], 'input.txt')
        """
        with open(input_file, 'r') as f:
            subprocess.run(command, stdin=f)

    def display_help(self):
        """
        Display help information.
        
        Example:
            display_help()
        """
        help_text = """
        Available commands:
        - modify <permissions> <file_name>: Modify file permissions
        - list <path>: Display file attributes
        - exit: Exit the shell
        - help: Display this help message
        """
        print(help_text)

    def run(self):
        """
        Run the custom shell.
        
        Example:
            run()
        """
        while True:
            command = input("custom_shell> ")
            parsed_command, command_type = self.parse_command(command)
            if command_type == 'pipe':
                self.execute_piped_commands(parsed_command)
            elif command_type == 'redirect_out':
                self.redirect_output(parsed_command[0].strip().split(), parsed_command[1].strip())
            elif command_type == 'redirect_in':
                self.redirect_input(parsed_command[0].strip().split(), parsed_command[1].strip())
            else:
                self.execute_command(parsed_command)

if __name__ == "__main__":
    shell = CustomShell()
    shell.run()
